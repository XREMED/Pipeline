height=25,
width=40,
units='cm',
) {
vln <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3)
p1 <- DimPlot(pro.combined, reduction = "umap", group.by = "plate")
p2 <- DimPlot(pro.combined, reduction = "umap", label = TRUE, repel = TRUE)
p3 <- DimPlot(pro.combined, reduction = "umap", group.by = "treatment")
cluster_plt <- p1+p2+p3
ggsave(filename = paste(outdir, '/vln_plot', device, sep=''),
plot = vln,
width = width,
height = height,
units = units)
ggsave(filename = paste(outdir, '/cluster_plot', device, sep=''),
plot = cluster_plt,
width = width,
height = height,
units = units)
}
plt_module <- function(seurat_obj,
outdir,
device = 'jpg',
height=25,
width=40,
units='cm') {
vln <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3)
p1 <- DimPlot(pro.combined, reduction = "umap", group.by = "plate")
p2 <- DimPlot(pro.combined, reduction = "umap", label = TRUE, repel = TRUE)
p3 <- DimPlot(pro.combined, reduction = "umap", group.by = "treatment")
cluster_plt <- p1+p2+p3
ggsave(filename = paste(outdir, '/vln_plot', device, sep=''),
plot = vln,
width = width,
height = height,
units = units)
ggsave(filename = paste(outdir, '/cluster_plot', device, sep=''),
plot = cluster_plt,
width = width,
height = height,
units = units)
}
run <- function(args) {
data_list <- data_process(args$count_matrix,
group_info = args$group_info)
if (args$method=='SCTransform') {
seurat_obj <- seurat_sctransform(data_list[[1]],
group_data = data_list[[2]],
outdir = args$outdir,
project = args$project,
group_by = args$group_by,
dims = args$dims,
min.cells = args$min.cells,
min.features = args$min.features,
k.filter = args$k.filter)
} else if (args$method=='integrate') {
seurat_obj <- seurat_integrate(data_list[[1]],
group_data = data_list[[2]],
outdir = args$outdir,
project = args$project,
group_by = args$group_by,
dims = args$dims,
min.cells = args$min.cells,
min.features = args$min.features,
k.filter = args$k.filter)
}
plt_module(seurat_obj = seurat_obj,
outdir=args$outdir)
}
parser <- ArgumentParser()
parser$add_argument("--count_matrix",
required=TRUE,
help="Count matrix.")
parser$add_argument("--group_info",
required=TRUE,
help="Group info file.")
parser$add_argument("--outdir",
required=TRUE,
help="Output directory.")
parser$add_argument("--method",
required=TRUE,
help="Normalize method for integration.",
choices=c('integrate', 'SCTransform'))
parser$add_argument("--min.cells",
default=4,
help="Include features detected in at least this many cells.
Will subset the counts matrix as well. To reintroduce excluded features, create a new object with a lower cutoff.")
parser$add_argument("--min.features",
default=200,
help="Include cells where at least this many features are detected.")
parser$add_argument("--dims",
default=6,
help="PCA nums.")
parser$add_argument("--project",
required=TRUE,
help="Project name.")
parser$add_argument("--k.filter",
deafult=80,
help="Mininum cell nums of sample.")
args <- parser$parse_args()
run(args)
source("~/notebook/test.R")
data_l = data_process(matrix_f, group_f)
matrix_f = '~/Pipeline_test/out/05.count/all_matrix.txt'
group_f = '~/Pipeline_test/plate_info_template.csv'
data_l = data_process(matrix_f, group_f)
p
data_process <- function(matrix_file, group_info) {
counts <- read.table(matrix_file,
sep='\t', header=T,
check.names = F)
rownames(counts) <- counts$gene_name
counts <- counts[-c(1,2)]
group_info <- read.csv(group_info,
sep=',')
group_info$barcode <- paste(group_info$barcode,
group_info$plate_tag,
sep = '-')
group_info <- group_info[group_info$barcode %in% colnames(counts), ]
return(list(counts, group_info))
}
data_l = data_process(matrix_f, group_f)
seu_obj <- seurat_integrate(data_l[[1]], group_data = data_l[[2]])
seu_obj <- seurat_integrate(data_l[[1]], group_data = data_l[[2]], project = 'MCE')
data_process <- function(matrix_file, group_info) {
counts <- read.table(matrix_file,
sep='\t', header=T,
check.names = F)
rownames(counts) <- counts$gene_name
counts <- counts[-c(1,2)]
group_info <- read.csv(group_info,
sep=',')
group_info$barcode <- paste(group_info$barcode,
group_info$plate_tag,
sep = '-')
group_info <- group_info[group_info$barcode %in% colnames(counts), ]
return(list(counts, group_info))
}
seurat_integrate <- function(counts,
group_data,
project,
outdir,
group_by='plate',
min.cells=4,
min.features=200,
k.filter=80,
dims=10) {
pro <- CreateSeuratObject(counts = counts, project = project,
min.cells = min.cells,
min.features = min.features)
group_data <- group_data[match(rownames(pro@meta.data), group_data$barcode), ]
pro@meta.data$plate <- group_data$plate_tag
pro@meta.data$treatment <- group_data$treat
pro[["percent.mt"]] <- PercentageFeatureSet(pro, pattern = "^MT-")
pro.list <- SplitObject(pro, split.by = group_by)
# normalize and identify variable features for each dataset independently
pro.list <- lapply(X = pro.list, FUN = function(x) {
x <- NormalizeData(x)
x <- FindVariableFeatures(x, selection.method = "vst", nfeatures = 2000)
})
# select features that are repeatedly variable across datasets for integration
features <- SelectIntegrationFeatures(object.list = pro.list)
pro.anchors <- FindIntegrationAnchors(object.list = pro.list,
anchor.features = features,
k.filter = k.filter)
# this command creates an 'integrated' data assay
pro.combined <- IntegrateData(anchorset = pro.anchors,
k.weight = k.filter)
# specify that we will perform downstream analysis on the corrected data note that the
# original unmodified data still resides in the 'RNA' assay
DefaultAssay(pro.combined) <- "integrated"
# Run the standard workflow for visualization and clustering
pro.combined <- ScaleData(pro.combined,
verbose = FALSE)
pro.combined <- RunPCA(pro.combined,
npcs = dims,
verbose = FALSE)
print(ElbowPlot(pro.combined, reduction = 'pca', ndims=10))
pro.combined <- RunUMAP(pro.combined,
reduction = "pca",
dims = 1:dims)
pro.combined <- RunTSNE(pro.combined,
reduction = "pca",
dims = 1:dims)
pro.combined <- FindNeighbors(pro.combined,
reduction = "pca",
dims = 1:dims)
pro.combined <- FindClusters(pro.combined,
resolution = 0.5)
saveRDS(pro.combined,
file = paste(outdir, '/integrate.seurat.rds'))
return(pro.combined)
}
# SCT
seurat_sctransform <- function(counts,
group_data,
project,
outdir,
group_by='plate',
min.cells=4,
min.features=200,
k.filter=80,
dims=10) {
# make seurat object
pro <- CreateSeuratObject(counts = counts,
project = project,
min.cells = min.cells,
min.features = min.features)
group_data <- group_data[match(rownames(pro@meta.data), group_data$barcode), ]
pro@meta.data$plate <- group_data$plate_tag
pro@meta.data$treatment <- group_data$treat
# count mito percent
pro[["percent.mt"]] <- PercentageFeatureSet(pro, pattern = "^MT-")
# split and integrate
pro.list <- SplitObject(pro, split.by = "plate")
pro.list <- lapply(X = pro.list, FUN = SCTransform)
features <- SelectIntegrationFeatures(object.list = pro.list,
nfeatures = 2000)
pro.list <- PrepSCTIntegration(object.list = pro.list,
anchor.features = features)
pro.anchors <- FindIntegrationAnchors(object.list = pro.list,
normalization.method = "SCT",
anchor.features = features,
k.filter = k.filter)
pro.combined.sct <- IntegrateData(anchorset = pro.anchors,
normalization.method = "SCT",
k.weight = k.filter)
pro.combined.sct <- RunPCA(pro.combined.sct,
npcs = dims,
verbose = FALSE)
pro.combined.sct <- RunUMAP(pro.combined.sct,
reduction = "pca",
dims = 1:dims)
pro.combined.sct <- FindNeighbors(pro.combined.sct,
reduction = "pca",
dims = 1:dims)
pro.combined.sct <- FindClusters(pro.combined.sct,
resolution = 0.5)
saveRDS(pro.combined.sct,
file = paste(outdir, '/sct.seurat.rds'))
return(pro.combined.sct)
}
plt_module <- function(seurat_obj,
outdir,
device = 'jpg',
height=25,
width=40,
units='cm') {
vln <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
ncol = 3)
p1 <- DimPlot(pro.combined, reduction = "umap", group.by = "plate")
p2 <- DimPlot(pro.combined, reduction = "umap", label = TRUE, repel = TRUE)
p3 <- DimPlot(pro.combined, reduction = "umap", group.by = "treatment")
cluster_plt <- p1+p2+p3
ggsave(filename = paste(outdir, '/vln_plot', device, sep=''),
plot = vln,
width = width,
height = height,
units = units)
ggsave(filename = paste(outdir, '/cluster_plot', device, sep=''),
plot = cluster_plt,
width = width,
height = height,
units = units)
}
run <- function(outdir,
count_matrix,
group_info,
project,
group_by,
method,
dims,
min.cells,
min.features,
k.filter) {
if (!dir.exists(outdir)) {
dir.create(outdir)
}
data_list <- data_process(count_matrix,
group_info = group_info)
if (method=='SCTransform') {
seurat_obj <- seurat_sctransform(counts = data_list[[1]],
group_data = data_list[[2]],
outdir = outdir,
project = project,
group_by = group_by,
dims = dims,
min.cells = min.cells,
min.features = min.features,
k.filter = k.filter)
} else if (method=='integrate') {
seurat_obj <- seurat_integrate(counts = data_list[[1]],
group_data = data_list[[2]],
outdir = outdir,
project = project,
group_by = group_by,
dims = dims,
min.cells = min.cells,
min.features = min.features,
k.filter = k.filter)
}
plt_module(seurat_obj = seurat_obj,
outdir=outdir)
}
l <- data_process('~/Pipeline_test/out/05.count/all_matrix.txt', '~/Pipeline_test/plate_info_template.csv')
head(l[[1]])
t1 <- l[[1]]
View(t1)
t1 <- l[[2]]
View(t1)
t1 <- l[[1]]
t2 <- l[[2]]
View(t1)
View(t2)
l <- data_process('~/Pipeline_test/out/05.count/all_matrix.txt', '~/Pipeline_test/plate_info_template.txt')
t1 <- l[[1]]
t2 <- l[[2]]
View(t1)
View(t2)
data_process <- function(matrix_file, group_info) {
counts <- read.table(matrix_file,
sep='\t', header=T,
check.names = F)
rownames(counts) <- counts$gene_name
counts <- counts[-c(1,2)]
group_info <- read.table(group_info,
sep='\t',
header = T)
group_info$barcode <- paste(group_info$barcode,
group_info$plate_tag,
sep = '-')
group_info <- group_info[group_info$barcode %in% colnames(counts), ]
return(list(counts, group_info))
}
l <- data_process('~/Pipeline_test/out/05.count/all_matrix.txt', '~/Pipeline_test/plate_info_template.txt')
t1 <- l[[1]]
t2 <- l[[2]]
View(t2)
dir('~/Pipeline_test/out/06.analysis/')
grep('*.rds', dir('~/Pipeline_test/out/06.analysis/'))
list.files('~/Pipeline_test/out/06.analysis/*.rds')
list.files(pattern = '~/Pipeline_test/out/06.analysis/*.rds')
dir(pattern = '~/Pipeline_test/out/06.analysis/*.rds')
a <- list.files(pattern = '~/Pipeline_test/out/06.analysis/*.rds')
a
a <- list.files(path='~/Pipeline_test/out/06.analysis/', pattern = '*.rds')
a
a[1]
plt_module <- function(seurat_data,
outdir,
height=25,
width=40,
units='cm') {
seurat_obj <- readRDS(seurat_data)
vln <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
assay='RNA',
ncol = 3)
pca1 <- DimPlot(seurat_obj, reduction='pca', group.by = 'plate')
pca2 <- DimPlot(seurat_obj, reduction='pca', group.by = 'treatment')
pca <- pca1+pca2
p1 <- DimPlot(seurat_obj, reduction = "umap", group.by = "plate")
p2 <- DimPlot(seurat_obj, reduction = "umap", label = TRUE, repel = TRUE)
p3 <- DimPlot(seurat_obj, reduction = "umap", group.by = "treatment")
cluster_plt <- p1+p2+p3
ggsave(filename = paste(outdir, '/vln_plot.png', sep=''),
plot = vln,
width = width,
height = height,
units = units)
ggsave(filename = paste(outdir, '/pca_plot.png', sep=''),
plot = pca,
width = width,
height = height,
units = units)
ggsave(filename = paste(outdir, '/cluster_plot.png', sep=''),
plot = cluster_plt,
width = width,
height = height,
units = units)
}
plt_module(seurat_data = '~/Pipeline_test/out/06.analysis/sct.seurat.rds', outdir='~/Pipeline_test/out/06.analysis/')
plt_module <- function(seurat_data,
outdir,
height=25,
width=40,
units='cm') {
seurat_obj <- readRDS(seurat_data)
vln <- VlnPlot(seurat_obj,
features = c("nFeature_RNA", "nCount_RNA", "percent.mt"),
assay='RNA',
group.by = 'orig.ident',
ncol = 3)
pca1 <- DimPlot(seurat_obj, reduction='pca', group.by = 'plate')
pca2 <- DimPlot(seurat_obj, reduction='pca', group.by = 'treatment')
pca <- pca1+pca2
p1 <- DimPlot(seurat_obj, reduction = "umap", group.by = "plate")
p2 <- DimPlot(seurat_obj, reduction = "umap", label = TRUE, repel = TRUE)
p3 <- DimPlot(seurat_obj, reduction = "umap", group.by = "treatment")
cluster_plt <- p1+p2+p3
ggsave(filename = paste(outdir, '/vln_plot.png', sep=''),
plot = vln,
width = width,
height = height,
units = units)
ggsave(filename = paste(outdir, '/pca_plot.png', sep=''),
plot = pca,
width = width,
height = height,
units = units)
ggsave(filename = paste(outdir, '/cluster_plot.png', sep=''),
plot = cluster_plt,
width = width,
height = height,
units = units)
}
plt_module(seurat_data = '~/Pipeline_test/out/06.analysis/sct.seurat.rds', outdir='~/Pipeline_test/out/06.analysis/')
sum_files <- list.files(path = './Pipeline_test/out/03.mapping/',
pattern = '*_summary.txt',
full.names = T,
all.files = T)
PATH = './Pipeline_test/out/03.mapping/'
sum_files <- list.files(path = PATH,
pattern = '*_summary.txt',
full.names = F,
all.files = T)
t <- read.table('./Pipeline_test/out/03.mapping/005-68_summary.txt', sep='\t')
View(t)
t['Uniquely Mapped Reads fraction:',]
t['Uniquely Mapped Reads fraction:', V2]
t['Uniquely Mapped Reads fraction:', 'V2']
t[2, 'V2']
as.numeric(t[2, 'V2'])
gsub('"', '', t[2, 'V2'])
gsub('%', '', t[2, 'V2'])
n <- gsub('%', '', t[2, 'V2'])
as.numeric(n)
# mappingretes
library(ggplot2)
map_rates <- sapply(sum_files, function(x) {
sample_name = gsub('_summary.txt', '', x)
tmp <- read.table(paste(PATH, '/', x, sep=''), sep='\t')
mr <- as.numeric(gsub('%', '', tmp[2, 'V2']))
return(paste(sample_name, mr, sep='-'))
})
map_rates <- sapply(sum_files, function(x) {
sample_name = gsub('_summary.txt', '', x)
tmp <- read.table(paste(PATH, '/', x, sep=''), sep='\t')
mr <- as.numeric(gsub('%', '', tmp[2, 'V2']))
return(paste(sample_name, mr, sep=': '))
})
df <- data.frame(s_m=map_rates)
View(df)
strsplit(005-68: 80.04, ': ', fixed = T)
strsplit('005-68: 80.04', ': ', fixed = T)
df$sample <- sapply(df$s_m, FUN = function(x) {
)
df$sample <- sapply(df$s_m, FUN = function(x) {
return(strsplit(x, ': ', fixed = T)[[1]])
}
)
df$sample <- sapply(df$s_m, FUN = function(x) {
return(strsplit(x, ': ', fixed = T)[[1]][1])
}
)
df$mapping_rates <- sapply(df$s_m, FUN = function(x) {
r <- strsplit(x, ': ', fixed = T)[[1]][2]
return(as.numeric(r))
}
)
ggplot(df, aes(sample, mapping_rates)) +
geom_bar()
ggplot(df, aes(mapping_rates)) +
geom_bar()
ggplot(df, aes(sample, mapping_rates)) +
geom_bar(stat = 'identity')
p <- ggplot(df, aes(sample, mapping_rates)) +
geom_bar(stat = 'identity') +
ggtitle('All samples mapping rates')
ggsave(filename = './Pipeline_test/out/03.mapping/mapping_rates.png',
plot = p,
width = 30,
height = 18,
units = 'cm')
score <- read.csv('./out/06.analysis/Enrichment_Score_normalization_ALL.csv', header = T,
check.names = F)
score <- read.csv('./Pipeline_test//out/06.analysis/Enrichment_Score_normalization_ALL.csv', header = T,
check.names = F)
score$Compound <- sapply(score$Compound, FUN = function(x) {
return(gsub('.', '-', x, fixed = TRUE))
})
View(score)
ggplot(score, aes(num, ES_normalization)) +
geom_point()
seurat_obj <- readRDS('/data_DELL_MD1400_storage_202208/xinzhou/Pipeline_test/out/06.analysis_int/integrate.seurat.rds')
meta.data <- seurat_obj@meta.data
score <- score[match(rownames(meta.data), score$Compound), ]
score$treatment <- meta.data$treatment
ggplot(score, aes(num, ES_normalization, color=treatment)) +
geom_point()
load("~/Pipeline_test/.RData")
setwd('~/Pipeline/pipeline/drug/')
source('./tools.R')
source('/data_DELL_MD1400_storage_202208/xinzhou/Pipeline/pipeline/drug/tools.R')
BiocManager::install('tidyverse')
BiocManager::install('ragg')
BiocManager::install('tidyverse')
